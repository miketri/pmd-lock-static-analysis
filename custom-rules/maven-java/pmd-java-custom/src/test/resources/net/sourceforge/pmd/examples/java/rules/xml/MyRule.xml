<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>Positive case - Lock used without unlocking.</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>Lock.lock() should have finally block in the same block.</message>
            <message>Lock.lock() should have unlock() called.</message>
        </expected-messages>
        <code><![CDATA[
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class BadExample {
    private final Lock lock = new ReentrantLock();

    public void foo() {
        lock.lock();
        System.out.println("Foo");
    }

}
     ]]></code>
    </test-code>
    <test-code>
        <description>Negative case - unlock used.</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class GoodExample {
    private final Lock lock = new ReentrantLock();

    public void foo() {
        lock.lock();
        try {
            System.out.println("Foo");
        } finally {
            lock.unlock();
        }
    }

}
     ]]></code>
    </test-code>
    <test-code>
        <description>Positive case - lock aliased.</description>
        <expected-problems>2</expected-problems>
        <expected-messages>
            <message>Lock.lock() should have finally block in the same block.</message>
            <message>Lock.lock() should have unlock() called.</message>
        </expected-messages>
        <code><![CDATA[
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class HarderExample {
    private final Lock lock = new ReentrantLock();

    public void foo() {
        Lock temp = lock;
        String lock = "Foo";
        temp.lock();
        System.out.println(lock);
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description>Negative case - lock called on object not of Lock type.</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Example {
    static class Door {
        public void lock() {
            System.out.println("Inner");
        }
    }

    public void foo() {
        Door lock = new Door();
        lock.lock();
    }
}
     ]]></code>
    </test-code>
</test-data>
